
const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');
const mongoose = require('mongoose');
const config = require('config');
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

async function start() {
  try {
    const url = `mongodb+srv://${config.get('db.user')}:${config.get('db.password')}@test-task-manager-clust.pohp3.mongodb.net/${config.get('db.db-name')}?retryWrites=true&w=majority`
    await mongoose.connect(url, {useNewUrlParser: true, useUnifiedTopology: true})

    server.listen(port, () => {
      console.log(`Server is running on port ${port}`)
    })
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (e) {
    console.log(e)
  }
}

start()

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
